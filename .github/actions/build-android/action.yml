name: 'Build Android Application'
description: 'Build Android APK and AAB with Capacitor'

inputs:
  environment:
    description: 'Environment (development/production)'
    required: true
  build-type:
    description: 'Build type (debug/release)'
    required: true
  working-directory:
    description: 'Working directory for Android project'
    required: false
    default: 'vaspitac-app'
  upload-artifacts:
    description: 'Whether to upload build artifacts'
    required: false
    default: 'true'
  # Signing inputs (for release builds)
  keystore-base64:
    description: 'Base64 encoded keystore file (required for release builds)'
    required: false
  keystore-password:
    description: 'Keystore password (required for release builds)'
    required: false
  key-alias:
    description: 'Key alias (required for release builds)'
    required: false
  key-password:
    description: 'Key password (required for release builds)'
    required: false

outputs:
  apk-path:
    description: 'Path to generated APK'
    value: ${{ steps.build-paths.outputs.apk-path }}
  aab-path:
    description: 'Path to generated AAB'
    value: ${{ steps.build-paths.outputs.aab-path }}

runs:
  using: 'composite'
  steps:
    - name: Setup Java and Android SDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Create google-services.json
      shell: bash
      working-directory: ${{ inputs.working-directory }}/android/app
      run: |
        echo "üîß Creating google-services.json..."
        echo "üìÅ Current directory: $(pwd)"
        echo "üìÅ Directory contents before:"
        ls -la
        
        echo '${{ env.GOOGLE_SERVICES_JSON }}' > google-services.json
        
        if [ -f "google-services.json" ]; then
          echo "‚úÖ google-services.json created successfully"
          echo "üìä File size: $(du -sh google-services.json | cut -f1)"
          echo "üîç First few lines of google-services.json:"
          head -5 google-services.json || echo "Could not read file content"
        else
          echo "‚ùå Failed to create google-services.json"
          exit 1
        fi

    - name: Setup Android keystore (Release builds only)
      if: ${{ inputs.build-type == 'release' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}/android
      run: |
        if [ -n "${{ inputs.keystore-base64 }}" ]; then
          echo "üîê Setting up release keystore..."
          echo "${{ inputs.keystore-base64 }}" | base64 -d > app/release-key.keystore
          
          cat > signing.properties << EOF
        storeFile=release-key.keystore
        storePassword=${{ inputs.keystore-password }}
        keyAlias=${{ inputs.key-alias }}
        keyPassword=${{ inputs.key-password }}
        EOF
          
          echo "‚úÖ Keystore setup completed"
        else
          echo "‚ö†Ô∏è  No keystore provided - release build will be unsigned"
          echo "‚ö†Ô∏è  Add the following secrets to enable signed releases:"
          echo "   - ANDROID_KEYSTORE_BASE64"
          echo "   - ANDROID_KEYSTORE_PASSWORD"
          echo "   - ANDROID_KEY_ALIAS"
          echo "   - ANDROID_KEY_PASSWORD"
        fi

    - name: Sync Capacitor
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîÑ Syncing Capacitor..."
        echo "üìÅ Current directory: $(pwd)"
        echo "üìÅ Directory contents:"
        ls -la
        
        echo "üîç Checking Capacitor config:"
        if [ -f "capacitor.config.ts" ]; then
          echo "‚úÖ capacitor.config.ts found"
          cat capacitor.config.ts
        else
          echo "‚ùå capacitor.config.ts not found"
        fi
        
        echo "üîç Checking dist directory:"
        if [ -d "dist" ]; then
          echo "‚úÖ dist directory found"
          echo "üìä Dist size: $(du -sh dist | cut -f1)"
          echo "üìÅ Dist contents:"
          ls -la dist/
        else
          echo "‚ùå dist directory not found"
          echo "üìÅ Available directories:"
          ls -la
          exit 1
        fi
        
        echo "üöÄ Starting Capacitor sync..."
        npx cap sync android
        echo "‚úÖ Capacitor sync completed"
        
        echo "üîç Post-sync Android directory:"
        if [ -d "android" ]; then
          ls -la android/
          
          echo "üîç Checking Android app assets:"
          if [ -d "android/app/src/main/assets/public" ]; then
            echo "‚úÖ Assets copied to Android"
            echo "üìä Assets size: $(du -sh android/app/src/main/assets/public | cut -f1)"
            echo "üìÅ Assets contents (first 10 items):"
            ls -la android/app/src/main/assets/public/ 2>/dev/null | head -10 || echo "Could not list assets contents"
            
            echo "üîç Checking for index.html in assets:"
            if [ -f "android/app/src/main/assets/public/index.html" ]; then
              echo "‚úÖ index.html found in Android assets"
              echo "üìä index.html size: $(du -sh android/app/src/main/assets/public/index.html | cut -f1)"
              echo "üîç First few lines of index.html:"
              head -5 android/app/src/main/assets/public/index.html 2>/dev/null || echo "Could not read index.html"
            else
              echo "‚ùå index.html NOT found in Android assets"
              echo "üìÅ Files in assets/public directory:"
              ls -la android/app/src/main/assets/public/ 2>/dev/null | grep -E '\.(html|js|css)$' | head -5 || echo "No web files found"
            fi
          else
            echo "‚ùå Assets directory not found in Android project"
            echo "üìÅ Available directories in android/app/src/main/:"
            ls -la android/app/src/main/ || echo "main directory not found"
          fi
        else
          echo "‚ùå Android directory not found after sync"
          exit 1
        fi

    - name: Make gradlew executable
      shell: bash
      working-directory: ${{ inputs.working-directory }}/android
      run: |
        echo "üîß Making gradlew executable..."
        echo "üìÅ Current directory: $(pwd)"
        echo "üìÅ Android directory contents:"
        ls -la
        
        if [ -f "gradlew" ]; then
          echo "‚úÖ gradlew found"
          echo "üîç Current permissions:"
          ls -la gradlew
          chmod +x gradlew
          echo "üîç New permissions:"
          ls -la gradlew
          echo "‚úÖ gradlew made executable"
        else
          echo "‚ùå gradlew not found"
          exit 1
        fi

    - name: Build Android APK
      shell: bash
      working-directory: ${{ inputs.working-directory }}/android
      run: |
        echo "üèóÔ∏è Building ${{ inputs.environment }} ${{ inputs.build-type }} APK..."
        echo "üìÅ Current directory: $(pwd)"
        echo "üîç Environment: ${{ inputs.environment }}"
        echo "üîç Build type: ${{ inputs.build-type }}"
        
        echo "üîç Gradle version:"
        ./gradlew --version
        
        echo "üîç Available Gradle tasks:"
        ./gradlew tasks --group="build" | head -20
        
        echo "üßπ Cleaning previous builds..."
        ./gradlew clean --info
        
        echo "üîç Build directory after clean:"
        ls -la app/build/ || echo "Build directory doesn't exist yet"
        
        echo "üöÄ Starting APK build..."
        if [ "${{ inputs.build-type }}" = "debug" ]; then
          BUILD_TASK="assemble${{ inputs.environment == 'development' && 'Development' || 'Production' }}Debug"
        else
          BUILD_TASK="assemble${{ inputs.environment == 'development' && 'Development' || 'Production' }}Release"
        fi
        
        echo "üîç Running task: $BUILD_TASK"
        ./gradlew $BUILD_TASK --info --stacktrace
        
        echo "‚úÖ APK build completed"
        echo "üîç Build outputs:"
        find app/build/outputs -name "*.apk" -type f || echo "No APK files found"

    - name: Build Android AAB
      shell: bash
      working-directory: ${{ inputs.working-directory }}/android
      run: |
        echo "üèóÔ∏è Building ${{ inputs.environment }} ${{ inputs.build-type }} AAB..."
        
        if [ "${{ inputs.build-type }}" = "debug" ]; then
          BUILD_TASK="bundle${{ inputs.environment == 'development' && 'Development' || 'Production' }}Debug"
        else
          BUILD_TASK="bundle${{ inputs.environment == 'development' && 'Development' || 'Production' }}Release"
        fi
        
        echo "üîç Running task: $BUILD_TASK"
        ./gradlew $BUILD_TASK --info --stacktrace
        
        echo "‚úÖ AAB build completed"
        echo "üîç Bundle outputs:"
        find app/build/outputs -name "*.aab" -type f || echo "No AAB files found"

    - name: Set build paths
      id: build-paths
      shell: bash
      working-directory: ${{ inputs.working-directory }}/android
      run: |
        ENV_SUFFIX=${{ inputs.environment == 'development' && 'development' || 'production' }}
        BUILD_SUFFIX=${{ inputs.build-type }}
        
        APK_PATH="app/build/outputs/apk/${ENV_SUFFIX}/${BUILD_SUFFIX}/app-${ENV_SUFFIX}-${BUILD_SUFFIX}.apk"
        AAB_PATH="app/build/outputs/bundle/${ENV_SUFFIX}${BUILD_SUFFIX^}/app-${ENV_SUFFIX}-${BUILD_SUFFIX}.aab"
        
        echo "apk-path=${APK_PATH}" >> $GITHUB_OUTPUT
        echo "aab-path=${AAB_PATH}" >> $GITHUB_OUTPUT
        
        echo "üì± Build paths:"
        echo "   APK: ${APK_PATH}"
        echo "   AAB: ${AAB_PATH}"

    - name: Verify build outputs
      shell: bash
      working-directory: ${{ inputs.working-directory }}/android
      run: |
        APK_PATH="${{ steps.build-paths.outputs.apk-path }}"
        AAB_PATH="${{ steps.build-paths.outputs.aab-path }}"
        
        echo "üîç Verifying build outputs..."
        
        if [ -f "$APK_PATH" ]; then
          echo "‚úÖ APK found: $APK_PATH"
          echo "üìä APK size: $(du -sh "$APK_PATH" | cut -f1)"
        else
          echo "‚ùå APK not found at: $APK_PATH"
          echo "üìÅ Available APK files:"
          find app/build/outputs/apk -name "*.apk" -type f || echo "No APK files found"
          exit 1
        fi
        
        if [ -f "$AAB_PATH" ]; then
          echo "‚úÖ AAB found: $AAB_PATH"
          echo "üìä AAB size: $(du -sh "$AAB_PATH" | cut -f1)"
        else
          echo "‚ùå AAB not found at: $AAB_PATH"
          echo "üìÅ Available AAB files:"
          find app/build/outputs/bundle -name "*.aab" -type f || echo "No AAB files found"
          exit 1
        fi

    - name: Upload APK artifact
      if: ${{ inputs.upload-artifacts == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: apk-${{ inputs.environment }}-${{ inputs.build-type }}
        path: ${{ inputs.working-directory }}/android/${{ steps.build-paths.outputs.apk-path }}
        retention-days: 30

    - name: Upload AAB artifact
      if: ${{ inputs.upload-artifacts == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: aab-${{ inputs.environment }}-${{ inputs.build-type }}
        path: ${{ inputs.working-directory }}/android/${{ steps.build-paths.outputs.aab-path }}
        retention-days: 30

    - name: Debug build environment (on failure)
      if: failure()
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üö® BUILD FAILED - Collecting debug information..."
        echo "=================================="
        
        echo "üîç System Information:"
        echo "OS: $(uname -a)"
        echo "Java version: $(java -version 2>&1)"
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        
        echo "üîç Environment Variables:"
        echo "ANDROID_HOME: ${ANDROID_HOME:-'Not set'}"
        echo "ANDROID_SDK_ROOT: ${ANDROID_SDK_ROOT:-'Not set'}"
        echo "PATH: $PATH"
        
        echo "üîç Working Directory Structure:"
        echo "Current directory: $(pwd)"
        find . -maxdepth 3 -type d 2>/dev/null | head -20 || echo "Directory listing failed"
        
        echo "üîç Capacitor Configuration:"
        if [ -f "capacitor.config.ts" ]; then
          cat capacitor.config.ts
        else
          echo "capacitor.config.ts not found"
        fi
        
        echo "üîç Package.json scripts:"
        if [ -f "package.json" ]; then
          grep -A 20 '"scripts"' package.json || echo "No scripts section found"
        fi
        
        echo "üîç Android Directory:"
        if [ -d "android" ]; then
          echo "Android directory contents:"
          ls -la android/
          
          echo "üîç Android App Directory:"
          if [ -d "android/app" ]; then
            ls -la android/app/
            
            echo "üîç google-services.json status:"
            if [ -f "android/app/google-services.json" ]; then
              echo "‚úÖ google-services.json exists"
              echo "Size: $(du -sh android/app/google-services.json | cut -f1)"
            else
              echo "‚ùå google-services.json missing"
            fi
          fi
          
          echo "üîç Gradle files:"
          find android/ -name "*.gradle" -type f 2>/dev/null | head -10 || echo "No Gradle files found"
          
          echo "üîç Build directory:"
          if [ -d "android/app/build" ]; then
            echo "Build directory exists"
            find android/app/build -name "*.apk" -o -name "*.aab" 2>/dev/null | head -10 || echo "No build artifacts found"
          else
            echo "Build directory doesn't exist"
          fi
          
          echo "üîç Gradle logs (last 50 lines):"
          if [ -f "android/app/build/reports/profile/profile-*.html" ]; then
            echo "Gradle build reports found"
          fi
          
          echo "üîç Last Gradle daemon log:"
          find ~/.gradle/daemon -name "*.log" -type f 2>/dev/null -exec ls -la {} \; | tail -5 2>/dev/null || echo "No Gradle daemon logs found"
        else
          echo "‚ùå Android directory doesn't exist"
        fi
        
        echo "üîç Dist Directory:"
        if [ -d "dist" ]; then
          echo "Dist directory exists"
          echo "Size: $(du -sh dist | cut -f1)"
          echo "Contents (first 10 items):"
          ls -la dist/ 2>/dev/null | head -10 || echo "Could not list dist contents"
          
          echo "üîç Key files in dist:"
          [ -f "dist/index.html" ] && echo "‚úÖ index.html exists" || echo "‚ùå index.html missing"
          [ -d "dist/assets" ] && echo "‚úÖ assets directory exists" || echo "‚ùå assets directory missing"
        else
          echo "‚ùå Dist directory doesn't exist"
        fi
        
        echo "üîç NPX Capacitor Info:"
        npx cap doctor || echo "Capacitor doctor failed"
        
        echo "=================================="
        echo "üö® Debug information collection completed"

    - name: Clean up keystore
      if: ${{ inputs.build-type == 'release' && inputs.keystore-base64 != '' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}/android
      run: |
        rm -f app/release-key.keystore
        rm -f signing.properties
        echo "üßπ Keystore cleanup completed"
