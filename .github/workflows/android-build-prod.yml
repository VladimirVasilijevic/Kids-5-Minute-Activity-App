name: Android Build Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Security scan job (runs first)
  security-scan:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run security scan
        uses: ./.github/actions/security-scan
        with:
          scan-dependencies: 'true'
          scan-code: 'true'

  # Build web application (prerequisite for Android builds)
  build-web:
    runs-on: ubuntu-latest
    environment: production
    needs: security-scan
    outputs:
      web-build-artifact: web-build-production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create environment configuration
        uses: ./.github/actions/create-environment
        with:
          environment: 'production'
          firebase-project: ${{ secrets.FIREBASE_PROJECT_ID }}
          firebase-api-key: ${{ secrets.FIREBASE_API_KEY }}
          firebase-auth-domain: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          firebase-storage-bucket: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          firebase-messaging-sender-id: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          firebase-app-id: ${{ secrets.FIREBASE_APP_ID }}
          firebase-measurement-id: ${{ secrets.FIREBASE_MEASUREMENT_ID }}

      - name: Build web application
        uses: ./.github/actions/build-web
        with:
          configuration: 'production'
          upload-artifact: 'true'

  # Android Debug Build (parallel with Release)
  build-android-debug:
    runs-on: ubuntu-latest
    environment: production
    needs: build-web
    env:
      GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download web build
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-web.outputs.web-build-artifact }}
          path: vaspitac-app/dist

      - name: Verify web build artifact (Debug)
        working-directory: vaspitac-app
        run: |
          echo "üîç [DEBUG] Verifying downloaded web build..."
          echo "üìÅ Current directory: $(pwd)"
          echo "üìÅ Directory contents:"
          ls -la
          
          echo "üìÅ Dist directory:"
          if [ -d "dist" ]; then
            echo "‚úÖ Dist directory found"
            echo "üìä Size: $(du -sh dist | cut -f1)"
            echo "üìÅ Contents:"
            ls -la dist/ | head -10
            
            echo "üîç Key files check:"
            [ -f "dist/index.html" ] && echo "‚úÖ index.html found" || echo "‚ùå index.html missing"
            [ -d "dist/assets" ] && echo "‚úÖ assets directory found" || echo "‚ùå assets directory missing"
          else
            echo "‚ùå Dist directory not found"
            echo "üìÅ Available directories:"
            ls -la
            exit 1
          fi

      - name: Build Android Debug
        uses: ./.github/actions/build-android
        with:
          environment: 'production'
          build-type: 'debug'
          upload-artifacts: 'true'

  # Android Release Build (parallel with Debug) - SIGNED FOR PRODUCTION
  build-android-release:
    runs-on: ubuntu-latest
    environment: production
    needs: build-web
    env:
      GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download web build
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-web.outputs.web-build-artifact }}
          path: vaspitac-app/dist

      - name: Verify web build artifact (Release)
        working-directory: vaspitac-app
        run: |
          echo "üîç [RELEASE] Verifying downloaded web build..."
          echo "üìÅ Current directory: $(pwd)"
          echo "üìÅ Directory contents:"
          ls -la
          
          echo "üìÅ Dist directory:"
          if [ -d "dist" ]; then
            echo "‚úÖ Dist directory found"
            echo "üìä Size: $(du -sh dist | cut -f1)"
            echo "üìÅ Contents:"
            ls -la dist/ | head -10
            
            echo "üîç Key files check:"
            [ -f "dist/index.html" ] && echo "‚úÖ index.html found" || echo "‚ùå index.html missing"
            [ -d "dist/assets" ] && echo "‚úÖ assets directory found" || echo "‚ùå assets directory missing"
          else
            echo "‚ùå Dist directory not found"
            echo "üìÅ Available directories:"
            ls -la
            exit 1
          fi

      - name: Build Android Release (Signed)
        uses: ./.github/actions/build-android
        with:
          environment: 'production'
          build-type: 'release'
          upload-artifacts: 'true'
          # TODO: Uncomment and configure these secrets for signed production releases
          # keystore-base64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          # keystore-password: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          # key-alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          # key-password: ${{ secrets.ANDROID_KEY_PASSWORD }}

  # Verification job (runs after both builds complete)
  verify-builds:
    runs-on: ubuntu-latest
    needs: [build-android-debug, build-android-release]
    if: always()
    steps:
      - name: Check build results
        run: |
          echo "üîç Checking build results..."
          echo "Debug build result: ${{ needs.build-android-debug.result }}"
          echo "Release build result: ${{ needs.build-android-release.result }}"
          
          if [ "${{ needs.build-android-debug.result }}" = "success" ] && [ "${{ needs.build-android-release.result }}" = "success" ]; then
            echo "‚úÖ Both builds succeeded"
          elif [ "${{ needs.build-android-debug.result }}" = "success" ]; then
            echo "‚ö†Ô∏è  Debug build succeeded, Release build failed"
          elif [ "${{ needs.build-android-release.result }}" = "success" ]; then
            echo "‚ö†Ô∏è  Release build succeeded, Debug build failed"
          else
            echo "‚ùå Both builds failed"
          fi

      - name: Verify production builds (Success)
        if: ${{ needs.build-android-debug.result == 'success' && needs.build-android-release.result == 'success' }}
        run: |
          echo "üöÄ Production Android builds completed successfully!"
          echo "üì± Generated artifacts:"
          echo "   - APK Debug: apk-production-debug"
          echo "   - AAB Debug: aab-production-debug"
          echo "   - APK Release: apk-production-release"
          echo "   - AAB Release: aab-production-release"
          echo ""
          echo "üîê Signing Status:"
          echo "   - Debug builds: Signed with debug certificate"
          echo "   - Release builds: UNSIGNED (configure signing secrets to enable)"
          echo ""
          echo "üìã To enable signed production releases, add these GitHub secrets:"
          echo "   - ANDROID_KEYSTORE_BASE64: Base64 encoded keystore file"
          echo "   - ANDROID_KEYSTORE_PASSWORD: Keystore password"
          echo "   - ANDROID_KEY_ALIAS: Key alias from keystore"
          echo "   - ANDROID_KEY_PASSWORD: Key password"
          echo ""
          echo "‚úÖ All builds verified!"

      - name: Report build failures
        if: ${{ needs.build-android-debug.result != 'success' || needs.build-android-release.result != 'success' }}
        run: |
          echo "üö® Some builds failed!"
          echo ""
          echo "üìã Troubleshooting steps:"
          echo "1. Check the build logs above for detailed error messages"
          echo "2. Look for the 'üö® BUILD FAILED' debug section for system information"
          echo "3. Verify that GOOGLE_SERVICES_JSON secret is properly configured"
          echo "4. Ensure the web build completed successfully"
          echo "5. Check if Capacitor configuration is correct"
          echo "6. For production: Verify signing certificates are configured if needed"
          echo ""
          echo "üîç Common issues:"
          echo "- Missing or invalid google-services.json"
          echo "- Capacitor sync failures"
          echo "- Gradle build configuration issues"
          echo "- Missing Android SDK components"
          echo "- Production signing certificate issues"
          echo ""
          exit 1
