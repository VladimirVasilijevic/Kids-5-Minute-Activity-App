name: Android Release Build

on:
  push:
    tags:
      - 'v*' # Trigger on version tags
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '18'
  FIREBASE_PROJECT: 'ana-vaspitac-prod-e7ee4'

jobs:
  # Security scan job (runs first)
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run security scan
        uses: ./.github/actions/security-scan
        with:
          scan-dependencies: 'true'
          scan-code: 'true'

  # Test job (parallel with web-build)
  test:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create environment configuration (for tests)
        uses: ./.github/actions/create-environment
        with:
          working-directory: 'vaspitac-app'
          environment: 'production'
          firebase-project: ${{ env.FIREBASE_PROJECT }}
          firebase-api-key: ${{ secrets.FIREBASE_API_KEY }}
          firebase-auth-domain: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          firebase-storage-bucket: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          firebase-messaging-sender-id: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          firebase-app-id: ${{ secrets.FIREBASE_APP_ID }}
          firebase-measurement-id: ${{ secrets.FIREBASE_MEASUREMENT_ID }}

      - name: Install dependencies
        working-directory: vaspitac-app
        run: npm ci
        
      - name: Run tests
        working-directory: vaspitac-app
        run: npm run test -- --browsers=ChromeHeadless --watch=false

  # Web build job (parallel with test)
  web-build:
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create production environment
        uses: ./.github/actions/create-environment
        with:
          working-directory: 'vaspitac-app'
          environment: 'production'
          firebase-project: ${{ env.FIREBASE_PROJECT }}
          firebase-api-key: ${{ secrets.FIREBASE_API_KEY }}
          firebase-auth-domain: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          firebase-storage-bucket: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          firebase-messaging-sender-id: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          firebase-app-id: ${{ secrets.FIREBASE_APP_ID }}
          firebase-measurement-id: ${{ secrets.FIREBASE_MEASUREMENT_ID }}

      - name: Build production web app
        id: build
        uses: ./.github/actions/build-web
        with:
          configuration: 'production'
          base-href: './'
          upload-artifact: 'true'
          artifact-name: 'web-build-release'

  # Keystore preparation (shared by both Android jobs)
  prepare-keystore:
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      keystore-path: ${{ steps.keystore.outputs.path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create keystore from secrets
        id: keystore
        run: |
          # Create keystore directory
          mkdir -p android-keystore
          
          # Decode base64 keystore from secrets
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android-keystore/release-key.keystore
          
          # Set output path
          echo "path=$(pwd)/android-keystore/release-key.keystore" >> $GITHUB_OUTPUT
          
          # Verify keystore exists
          if [ -f "android-keystore/release-key.keystore" ]; then
            echo "✅ Keystore created successfully"
          else
            echo "❌ Keystore creation failed"
            exit 1
          fi

      - name: Upload keystore artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-keystore
          path: android-keystore/release-key.keystore
          retention-days: 1

  # Android Release APK
  android-release-apk:
    runs-on: ubuntu-latest
    environment: production
    needs: [test, web-build, prepare-keystore]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download production web build
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.web-build.outputs.artifact-name }}
          path: web-build-artifacts/

      - name: Move web build to correct location
        run: |
          # Remove existing dist directory if it exists
          if [ -d "vaspitac-app/dist" ]; then
            rm -rf vaspitac-app/dist
          fi
          # Move the web build to the correct location
          mv web-build-artifacts vaspitac-app/dist
          echo "✅ Web build moved to vaspitac-app/dist"
          echo "📁 Contents of vaspitac-app/dist:"
          ls -la vaspitac-app/dist/

      - name: Download keystore
        uses: actions/download-artifact@v4
        with:
          name: android-keystore
          path: android-keystore/

      - name: Setup Java and Android SDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Node.js for Capacitor
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: vaspitac-app/package-lock.json

      - name: Install Capacitor dependencies
        working-directory: vaspitac-app
        run: npm ci

      - name: Sync Capacitor
        working-directory: vaspitac-app
        run: npx cap sync android

      - name: Create google-services.json
        working-directory: vaspitac-app/android/app
        run: |
          echo "🔧 Creating google-services.json for production release..."
          # Use cat with heredoc to avoid shell interpretation issues
          cat > google-services.json << 'EOF'
          ${{ secrets.GOOGLE_SERVICES_JSON }}
          EOF
          echo "✅ google-services.json created"
          echo "📁 File size: $(wc -c < google-services.json) bytes"
          # Validate JSON structure (first few lines only for security)
          echo "🔍 Validating JSON structure..."
          if command -v jq >/dev/null 2>&1; then
            jq -e . google-services.json >/dev/null && echo "✅ Valid JSON" || echo "❌ Invalid JSON"
          else
            echo "⚠️ jq not available, skipping JSON validation"
          fi

      - name: Setup keystore for signing
        working-directory: vaspitac-app/android
        run: |
          # Copy keystore to Android project
          cp ../../android-keystore/release-key.keystore app/release-key.keystore
          
          # Create signing properties
          cat > signing.properties << EOF
          storeFile=release-key.keystore
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF
          
          echo "✅ Keystore setup completed"

      - name: Build Android Release APK
        working-directory: vaspitac-app/android
        run: |
          chmod +x gradlew
          ./gradlew clean
          ./gradlew assembleProductionRelease
        env:
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: vaspitac-app/android/app/build/outputs/apk/production/release/app-production-release.apk
          retention-days: 90

  # Android App Bundle (AAB)
  android-release-aab:
    runs-on: ubuntu-latest
    environment: production
    needs: [test, web-build, prepare-keystore]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download production web build
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.web-build.outputs.artifact-name }}
          path: web-build-artifacts/

      - name: Move web build to correct location
        run: |
          # Remove existing dist directory if it exists
          if [ -d "vaspitac-app/dist" ]; then
            rm -rf vaspitac-app/dist
          fi
          # Move the web build to the correct location
          mv web-build-artifacts vaspitac-app/dist
          echo "✅ Web build moved to vaspitac-app/dist"
          echo "📁 Contents of vaspitac-app/dist:"
          ls -la vaspitac-app/dist/

      - name: Download keystore
        uses: actions/download-artifact@v4
        with:
          name: android-keystore
          path: android-keystore/

      - name: Setup Java and Android SDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Node.js for Capacitor
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: vaspitac-app/package-lock.json

      - name: Install Capacitor dependencies
        working-directory: vaspitac-app
        run: npm ci

      - name: Sync Capacitor
        working-directory: vaspitac-app
        run: npx cap sync android

      - name: Create google-services.json
        working-directory: vaspitac-app/android/app
        run: |
          echo "🔧 Creating google-services.json for production release..."
          # Use cat with heredoc to avoid shell interpretation issues
          cat > google-services.json << 'EOF'
          ${{ secrets.GOOGLE_SERVICES_JSON }}
          EOF
          echo "✅ google-services.json created"
          echo "📁 File size: $(wc -c < google-services.json) bytes"
          # Validate JSON structure (first few lines only for security)
          echo "🔍 Validating JSON structure..."
          if command -v jq >/dev/null 2>&1; then
            jq -e . google-services.json >/dev/null && echo "✅ Valid JSON" || echo "❌ Invalid JSON"
          else
            echo "⚠️ jq not available, skipping JSON validation"
          fi

      - name: Setup keystore for signing
        working-directory: vaspitac-app/android
        run: |
          # Copy keystore to Android project
          cp ../../android-keystore/release-key.keystore app/release-key.keystore
          
          # Create signing properties
          cat > signing.properties << EOF
          storeFile=release-key.keystore
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF
          
          echo "✅ Keystore setup completed"

      - name: Build Android App Bundle (AAB)
        working-directory: vaspitac-app/android
        run: |
          chmod +x gradlew
          ./gradlew clean
          ./gradlew bundleProductionRelease
        env:
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: android-release-aab
          path: vaspitac-app/android/app/build/outputs/bundle/productionRelease/app-production-release.aab
          retention-days: 90

  # Create GitHub Release
  create-release:
    runs-on: ubuntu-latest
    needs: [android-release-apk, android-release-aab]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: android-release-apk
          path: release-artifacts/

      - name: Download Release AAB
        uses: actions/download-artifact@v4
        with:
          name: android-release-aab
          path: release-artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-artifacts/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build summary
  build-summary:
    runs-on: ubuntu-latest
    needs: [android-release-apk, android-release-aab, create-release]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "🚀 Android Release Build Completed!"
          echo "📱 Release APK: ${{ needs.android-release-apk.result }}"
          echo "📦 Release AAB: ${{ needs.android-release-aab.result }}"
          echo "🏷️ GitHub Release: ${{ needs.create-release.result }}"
          echo "✅ All release builds completed!"
