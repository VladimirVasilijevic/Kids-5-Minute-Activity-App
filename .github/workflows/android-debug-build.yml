name: Android Debug Build

on:
  push:
    branches: [main, develop]
    paths:
      - 'vaspitac-app/src/**'
      - 'vaspitac-app/package.json'
      - 'vaspitac-app/package-lock.json'
      - 'vaspitac-app/android/**'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Security scan job (runs first)
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run security scan
        uses: ./.github/actions/security-scan
        with:
          scan-dependencies: 'true'
          scan-code: 'true'

  # Test job (parallel with web-build)
  test:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create environment configuration (for tests)
        uses: ./.github/actions/create-environment
        with:
          working-directory: 'vaspitac-app'
          environment: 'development'
          firebase-project: 'test-project'
          firebase-api-key: 'test-key'
          firebase-auth-domain: 'test-domain'
          firebase-storage-bucket: 'test-bucket'
          firebase-messaging-sender-id: 'test-sender'
          firebase-app-id: 'test-app'
          firebase-measurement-id: 'test-measurement'

      - name: Install dependencies
        working-directory: vaspitac-app
        run: npm ci
        
      - name: Run tests
        working-directory: vaspitac-app
        run: npm run test -- --browsers=ChromeHeadless --watch=false

  # Web build job (parallel with test)
  web-build:
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      dev-artifact: ${{ steps.dev-build.outputs.artifact-name }}
      prod-artifact: ${{ steps.prod-build.outputs.artifact-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Development build
      - name: Create development environment
        uses: ./.github/actions/create-environment
        with:
          working-directory: 'vaspitac-app'
          environment: 'development'
          firebase-project: ${{ vars.FIREBASE_PROJECT_DEV || 'ana-vaspitac-dev' }}
          firebase-api-key: ${{ secrets.FIREBASE_API_KEY_DEV }}
          firebase-auth-domain: ${{ secrets.FIREBASE_AUTH_DOMAIN_DEV }}
          firebase-storage-bucket: ${{ secrets.FIREBASE_STORAGE_BUCKET_DEV }}
          firebase-messaging-sender-id: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID_DEV }}
          firebase-app-id: ${{ secrets.FIREBASE_APP_ID_DEV }}
          firebase-measurement-id: ${{ secrets.FIREBASE_MEASUREMENT_ID_DEV }}

      - name: Build development web app
        id: dev-build
        uses: ./.github/actions/build-web
        with:
          configuration: 'development'
          base-href: './'
          upload-artifact: 'true'
          artifact-name: 'web-build-dev'


      # Production build  
      - name: Create production environment
        uses: ./.github/actions/create-environment
        with:
          working-directory: 'vaspitac-app'
          environment: 'production'
          firebase-project: ${{ vars.FIREBASE_PROJECT_PROD || 'ana-vaspitac-prod-e7ee4' }}
          firebase-api-key: ${{ secrets.FIREBASE_API_KEY }}
          firebase-auth-domain: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          firebase-storage-bucket: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          firebase-messaging-sender-id: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          firebase-app-id: ${{ secrets.FIREBASE_APP_ID }}
          firebase-measurement-id: ${{ secrets.FIREBASE_MEASUREMENT_ID }}

      - name: Build production web app
        id: prod-build
        uses: ./.github/actions/build-web
        with:
          configuration: 'production'
          base-href: './'
          upload-artifact: 'true'
          artifact-name: 'web-build-prod'

  # Android Development APK
  android-dev-apk:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    environment: development
    needs: [test, web-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download development web build
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.web-build.outputs.dev-artifact }}
          path: web-build-artifacts/

      - name: Debug and move web build to correct location
        run: |
          echo "üîç Debugging web build artifacts..."
          echo "üìÅ Current directory contents:"
          ls -la
          
          echo "üìÅ web-build-artifacts contents:"
          if [ -d "web-build-artifacts" ]; then
            ls -la web-build-artifacts/
            echo "üìÅ Looking for nested directories:"
            find web-build-artifacts -name "index.html" -type f
          else
            echo "‚ùå web-build-artifacts directory not found!"
          fi
          
          echo "üìÅ vaspitac-app directory before cleanup:"
          ls -la vaspitac-app/ || echo "vaspitac-app directory not found"
          
          # Remove existing dist directory if it exists
          if [ -d "vaspitac-app/dist" ]; then
            echo "üóëÔ∏è Removing existing vaspitac-app/dist"
            rm -rf vaspitac-app/dist
          fi
          
          # Check if we have the right structure in artifacts
          if [ -f "web-build-artifacts/index.html" ]; then
            echo "‚úÖ Found index.html directly in web-build-artifacts"
            mv web-build-artifacts vaspitac-app/dist
          elif [ -d "web-build-artifacts" ]; then
            echo "üîç Checking for nested structure..."
            # Find the actual dist directory with index.html
            DIST_DIR=$(find web-build-artifacts -name "index.html" -type f -exec dirname {} \; | head -1)
            if [ -n "$DIST_DIR" ]; then
              echo "‚úÖ Found index.html in: $DIST_DIR"
              mv "$DIST_DIR" vaspitac-app/dist
            else
              echo "‚ùå No index.html found in web-build-artifacts"
              exit 1
            fi
          else
            echo "‚ùå web-build-artifacts directory not found"
            exit 1
          fi
          
          echo "‚úÖ Web build moved to vaspitac-app/dist"
          echo "üìÅ Final contents of vaspitac-app/dist:"
          ls -la vaspitac-app/dist/
          echo "üîç Checking for index.html:"
          if [ -f "vaspitac-app/dist/index.html" ]; then
            echo "‚úÖ index.html found!"
          else
            echo "‚ùå index.html NOT found!"
            exit 1
          fi

      - name: Setup Java and Android SDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Node.js for Capacitor
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: vaspitac-app/package-lock.json

      - name: Install Capacitor dependencies
        working-directory: vaspitac-app
        run: npm ci

      - name: Sync Capacitor
        working-directory: vaspitac-app
        run: npx cap sync android

      - name: Create google-services.json
        working-directory: vaspitac-app/android/app
        run: |
          echo "üîß Creating google-services.json for development..."
          # Use cat with heredoc to avoid shell interpretation issues
          cat > google-services.json << 'EOF'
          ${{ secrets.GOOGLE_SERVICES_JSON }}
          EOF
          echo "‚úÖ google-services.json created"
          echo "üìÅ File size: $(wc -c < google-services.json) bytes"
          # Validate JSON structure (first few lines only for security)
          echo "üîç Validating JSON structure..."
          if command -v jq >/dev/null 2>&1; then
            jq -e . google-services.json >/dev/null && echo "‚úÖ Valid JSON" || echo "‚ùå Invalid JSON"
          else
            echo "‚ö†Ô∏è jq not available, skipping JSON validation"
          fi

      - name: Build Android Debug APK
        working-directory: vaspitac-app/android
        run: |
          chmod +x gradlew
          ./gradlew clean
          ./gradlew assembleDevelopmentDebug
        env:
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}

      - name: Upload Development APK
        uses: actions/upload-artifact@v4
        with:
          name: android-dev-debug-apk
          path: vaspitac-app/android/app/build/outputs/apk/development/debug/app-development-debug.apk
          retention-days: 30

  # Android Production APK  
  android-prod-apk:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: production
    needs: [test, web-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download production web build
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.web-build.outputs.prod-artifact }}
          path: web-build-artifacts/

      - name: Move web build to correct location
        run: |
          # Remove existing dist directory if it exists
          if [ -d "vaspitac-app/dist" ]; then
            rm -rf vaspitac-app/dist
          fi
          # Move the web build to the correct location
          mv web-build-artifacts vaspitac-app/dist
          echo "‚úÖ Web build moved to vaspitac-app/dist"
          echo "üìÅ Contents of vaspitac-app/dist:"
          ls -la vaspitac-app/dist/

      - name: Setup Java and Android SDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Node.js for Capacitor
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: vaspitac-app/package-lock.json

      - name: Install Capacitor dependencies
        working-directory: vaspitac-app
        run: npm ci

      - name: Sync Capacitor
        working-directory: vaspitac-app
        run: npx cap sync android

      - name: Create google-services.json
        working-directory: vaspitac-app/android/app
        run: |
          echo "üîß Creating google-services.json for production..."
          # Use cat with heredoc to avoid shell interpretation issues
          cat > google-services.json << 'EOF'
          ${{ secrets.GOOGLE_SERVICES_JSON }}
          EOF
          echo "‚úÖ google-services.json created"
          echo "üìÅ File size: $(wc -c < google-services.json) bytes"
          # Validate JSON structure (first few lines only for security)
          echo "üîç Validating JSON structure..."
          if command -v jq >/dev/null 2>&1; then
            jq -e . google-services.json >/dev/null && echo "‚úÖ Valid JSON" || echo "‚ùå Invalid JSON"
          else
            echo "‚ö†Ô∏è jq not available, skipping JSON validation"
          fi

      - name: Build Android Debug APK
        working-directory: vaspitac-app/android
        run: |
          chmod +x gradlew
          ./gradlew clean
          ./gradlew assembleProductionDebug
        env:
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}

      - name: Upload Production APK
        uses: actions/upload-artifact@v4
        with:
          name: android-prod-debug-apk
          path: vaspitac-app/android/app/build/outputs/apk/production/debug/app-production-debug.apk
          retention-days: 30

  # Summary job
  build-summary:
    runs-on: ubuntu-latest
    needs: [android-dev-apk, android-prod-apk]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "üöÄ Android Debug Build Completed!"
          echo "üì± Development APK: ${{ needs.android-dev-apk.result }}"
          echo "üì± Production APK: ${{ needs.android-prod-apk.result }}"
          echo "‚úÖ All builds completed successfully!"
