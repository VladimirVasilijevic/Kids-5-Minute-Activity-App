name: Build Android APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

jobs:
  build-android-dev:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'vaspitac-app/package-lock.json'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install dependencies
      working-directory: vaspitac-app
      run: npm ci

    - name: Create environment.ts from secrets for DEV
      working-directory: vaspitac-app
      run: |
        cat <<EOF > src/environments/environment.ts
        export const environment = {
          production: false,
          firebase: {
            apiKey: "${{ secrets.FIREBASE_API_KEY }}",
            authDomain: "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
            projectId: "${{ secrets.FIREBASE_PROJECT_ID }}",
            storageBucket: "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
            messagingSenderId: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
            appId: "${{ secrets.FIREBASE_APP_ID }}",
            measurementId: "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
          }
        }
        EOF

    - name: Build Angular app
      working-directory: vaspitac-app
      run: npm run build
      
    - name: Sync Capacitor
      working-directory: vaspitac-app
      run: npx cap sync

    - name: Create google-services.json from secret for DEV
      working-directory: vaspitac-app/android/app
      run: |
        echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > google-services.json

    - name: Make gradlew executable
      working-directory: vaspitac-app/android
      run: chmod +x gradlew
      
    - name: Clean previous Android build
      working-directory: vaspitac-app/android
      run: ./gradlew clean
      
    - name: Build Android APK
      working-directory: vaspitac-app/android
      run: ./gradlew assembleDevelopmentDebug
      env:
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: vaspitac-app-debug-dev
        path: vaspitac-app/android/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30

    - name: Deploy Firebase to Development
      working-directory: vaspitac-app/firebase
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      run: |
        # Install Firebase CLI
        npm install -g firebase-tools
        
        # Set Firebase project to development
        firebase use development
        
        # Build functions if they exist
        if [ -d "functions" ]; then
          cd functions
          npm install
          npm run build
          cd ..
        fi
        
        # Deploy Firestore rules and indexes
        firebase deploy --only firestore:rules,firestore:indexes --config firebase.dev.json
        
        # Deploy Storage rules
        firebase deploy --only storage --config firebase.dev.json
        
        # Deploy Functions if they exist
        if [ -d "functions" ]; then
          firebase deploy --only functions --config firebase.dev.json
        fi

  build-android-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'vaspitac-app/package-lock.json'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install dependencies
      working-directory: vaspitac-app
      run: npm ci

    - name: Create environment.ts from secrets for PROD
      working-directory: vaspitac-app
      run: |
        cat <<EOF > src/environments/environment.ts
        export const environment = {
          production: true,
          firebase: {
            apiKey: "${{ secrets.FIREBASE_API_KEY }}",
            authDomain: "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
            projectId: "${{ secrets.FIREBASE_PROJECT_ID }}",
            storageBucket: "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
            messagingSenderId: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
            appId: "${{ secrets.FIREBASE_APP_ID }}",
            measurementId: "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
          }
        }
        EOF

    - name: Build Angular app
      working-directory: vaspitac-app
      run: npm run build
      
    - name: Sync Capacitor
      working-directory: vaspitac-app
      run: npx cap sync

    - name: Create google-services.json from secret for PROD
      working-directory: vaspitac-app/android/app
      run: |
        echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > google-services.json

    - name: Make gradlew executable
      working-directory: vaspitac-app/android
      run: chmod +x gradlew
      
    - name: Clean previous Android build
      working-directory: vaspitac-app/android
      run: ./gradlew clean
      
    - name: Build Android APK
      working-directory: vaspitac-app/android
      run: ./gradlew assembleProductionDebug
      env:
        ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: vaspitac-app-debug-prod
        path: vaspitac-app/android/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30 

    - name: Deploy Firebase to Production
      working-directory: vaspitac-app/firebase
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      run: |
        # Install Firebase CLI
        npm install -g firebase-tools
        
        # Set Firebase project to production
        firebase use production
        
        # Build functions if they exist
        if [ -d "functions" ]; then
          cd functions
          npm install
          npm run build
          cd ..
        fi
        
        # Deploy Firestore rules and indexes
        firebase deploy --only firestore:rules,firestore:indexes --config firebase.prod.json
        
        # Deploy Storage rules
        firebase deploy --only storage --config firebase.prod.json
        
        # Deploy Functions if they exist
        if [ -d "functions" ]; then
          firebase deploy --only functions --config firebase.prod.json
        fi 