rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to get user role
    function userRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // User profiles - users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Admins can read all user profiles
      allow read: if request.auth != null && userRole() == 'admin';
    }
    
    // Activities collections (en, sr, etc.)
    match /activities_en/{docId} {
      allow read: if resource.data.visibility == 'public'
        || (request.auth != null && resource.data.visibility == 'subscriber' && userRole() in ['subscriber', 'admin'])
        || (request.auth != null && resource.data.visibility == 'admin' && userRole() == 'admin');
      allow write: if request.auth != null && userRole() == 'admin';
    }
    match /activities_sr/{docId} {
      allow read: if resource.data.visibility == 'public'
        || (request.auth != null && resource.data.visibility == 'subscriber' && userRole() in ['subscriber', 'admin'])
        || (request.auth != null && resource.data.visibility == 'admin' && userRole() == 'admin');
      allow write: if request.auth != null && userRole() == 'admin';
    }
    // Blog collections
    match /blog_en/{docId} {
      allow read: if resource.data.visibility == 'public'
        || (request.auth != null && resource.data.visibility == 'subscriber' && userRole() in ['subscriber', 'admin'])
        || (request.auth != null && resource.data.visibility == 'admin' && userRole() == 'admin');
      allow write: if request.auth != null && userRole() == 'admin';
    }
    match /blog_sr/{docId} {
      allow read: if resource.data.visibility == 'public'
        || (request.auth != null && resource.data.visibility == 'subscriber' && userRole() in ['subscriber', 'admin'])
        || (request.auth != null && resource.data.visibility == 'admin' && userRole() == 'admin');
      allow write: if request.auth != null && userRole() == 'admin';
    }
    // Categories collections
    match /categories_en/{docId} {
      allow read: if true;
      allow write: if request.auth != null && userRole() == 'admin';
    }
    match /categories_sr/{docId} {
      allow read: if true;
      allow write: if request.auth != null && userRole() == 'admin';
    }
    // Tips collections
    match /tips_en/{docId} {
      allow read: if true;
      allow write: if request.auth != null && userRole() == 'admin';
    }
    match /tips_sr/{docId} {
      allow read: if true;
      allow write: if request.auth != null && userRole() == 'admin';
    }
    // About content collections
    match /about_en/{docId} {
      allow read: if true;
      allow write: if request.auth != null && userRole() == 'admin';
    }
    match /about_sr/{docId} {
      allow read: if true;
      allow write: if request.auth != null && userRole() == 'admin';
    }
    
    // Digital marketplace collections
    match /digital-files/{fileId} {
      allow read: if true; // Allow public read access for browsing shop
      allow write: if request.auth != null && userRole() == 'admin';
    }
    
    // User access records - users can only read their own access records
    match /user_access/{accessId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow write: if false; // Only server-side operations can modify access
    }
    
    // Purchase records - users can only read their own purchases
    match /purchases/{purchaseId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if false; // Only server-side operations can update purchases
      allow delete: if false; // No deletion allowed
    }
  }
} 